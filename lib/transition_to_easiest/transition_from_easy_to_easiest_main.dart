/// Make dependency imports from easy_localization explicit, showing only what is needed (we need to get rid of [StringTranslateExtension])
/// This mainly only applies to the main.dart file, since it will probably contain all the localization initialization.
/// In all other files, you will just need to remove the easy_localization package import,
/// leaving only the package generated by easiest_localization (the default name is “localization”).
import 'package:easy_localization/easy_localization.dart' show BuildContextEasyLocalizationExtension, DateFormat, EasyLocalization;
import 'package:easy_localization_loader/easy_localization_loader.dart';
import 'package:flutter/material.dart';

/// Import package, generated by easiest_localization
import 'package:localization/localization.dart';

Future<void> main() async {
  await EasyLocalization.ensureInitialized();
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({
    super.key,
  });

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  Locale? localeOverride;

  Future<void> onLocaleSwitched(BuildContext context, Locale locale) async {
    await context.setLocale(locale);
    setState(() => localeOverride = locale);
  }

  @override
  Widget build(BuildContext context) {
    /// You can keep easy-wrapper until the full transitioning will be ended, after - remove it and everything, related to it
    return EasyLocalization(
      supportedLocales: const [
        Locale('en'),
        Locale('es'),
        Locale('ru'),
        Locale('en', 'CA'),
      ],
      path: 'assets/i18n/easy',
      assetLoader: YamlAssetLoader(),
      child: Builder(
        builder: (BuildContext context) => MaterialApp(
          /// You can continue to use [String.tr()] extension. But in that time it will come from the "localization" package.
          /// But keep in mind - IT IS NOT SAFE, AS WELL IT WASN'T SAFE WITH easy_localization and the best way is - use generated code
          onGenerateTitle: (BuildContext context) => 'app_title'.tr(),

          /// Combine the supported locales provided by easy_localization and those generated by easiest_localization.
          /// After the transition is complete, you can remove anything related to easy_localization.
          supportedLocales: [
            ...supportedLocales,
            ...context.supportedLocales,
          ],

          /// Merge the supported delegates that are provided by easy_localization and those generated by easiest_localization.
          /// After the move is complete, you can remove anything related to easy_localization.
          localizationsDelegates: [
            ...localizationsDelegates,
            ...context.localizationDelegates,
          ],

          /// Remove implicit locale from
          // locale: localeOverride ?? context.locale,
          home: Home(),
        ),
      ),
    );
  }
}

/// Then, for optimal and secure results, you will need to translate the use of localized content from the `some.string.tr()` format
/// to the format of using the generated code.
class Home extends StatelessWidget {
  const Home({
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold();
  }
}
